//package WebServer;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

public class HttpRequest implements Runnable {
	final String CRLF = "\r\n";
	Socket socket;
	/*
	 * HttpRequest Constructor
	 * Takes the Communication socket as input
	 */
	public HttpRequest(Socket socket) throws Exception
	{
		this.socket = socket;
	}
        
	/*
	 * (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 */
	@Override
	public void run() {
            
            try
            {
                processRequest();
            }
            catch (Exception e)
            {
                System.out.println(e);
            }

	}

        /*
         * processRequest: 	processes and responses to the given request on the socket
         * 					returns into the socket the requested page or error page
         * 					if the page is not found.
         */
        private void processRequest() throws Exception
        {
        	/*
        	 * Get the Socket Identification Addresses
        	 * 				including host addresses and communication host addresses
        	 */
        	String LocalHost_IP = socket.getRemoteSocketAddress().toString();
        	int LocalHost_PORT = socket.getLocalPort();
        	String Connection_IP = socket.getInetAddress().toString();
        	int Connection_POrt = socket.getPort();
        	/*
        	 * Print out he communicating hosts Addresses
        	 */
        	System.out.println("The Sockets Addtress:");
        	System.out.println("LocalHost IP address: "+LocalHost_IP);
        	System.out.println("LocalHost port address: "+LocalHost_PORT);
        	System.out.println("Connected IP address: "+Connection_IP);
        	System.out.println("Connected port address: "+Connection_POrt);
        	System.out.println();
        	/*
        	 * Create Read and write buffers from the socket
        	 */
            BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            DataOutputStream os = new DataOutputStream(socket.getOutputStream());
            
            //get the Request line from the Request Message
            String requestLine = is.readLine();
            
            //print out the Request Message
            System.out.println("The Request message =>");
            String requestMessage;
            System.out.println("\t\t"+requestLine);
            while((requestMessage = is.readLine()).length() != 0){
            	System.out.println("\t\t"+requestMessage);
            }
            
            //Get the Request file name from the request line
            StringTokenizer tokens = new StringTokenizer(requestLine);
            tokens.nextToken();
            String fileName = tokens.nextToken();
            fileName = fileName.substring(1);
            if(fileName.isEmpty()){
            	fileName = "index.html";
            }
            /*
             * 	this is for the Site folder
             */
            	fileName = "../../Site/"+fileName;
            /*
             * 
             */
            System.out.println("Requested File:> "+fileName);
            
            
            //Open the requested file from storage
            FileInputStream fis = null;
            boolean fileExists = true;
            try
            {
                fis = new FileInputStream(fileName);
            }
            catch (FileNotFoundException e)
            {
                fileExists = false;
                System.out.println("FILE DOESNT EXIST");
            }
            
            
            // Prepare the Response Header
            String statusLine = null;
            String contentTypeLine = null;
            String entityBody = null;
            if (fileExists)
            {
                statusLine = "HTTP/1.1 200 OK" + CRLF;
                contentTypeLine = "Content-Type: " +
                contentType( fileName ) + CRLF;
            }
            else
            {
                statusLine= "HTTP/1.1 404 Not Found" + CRLF;
                contentTypeLine= "Content-Type: " + "text/html" + CRLF;
                entityBody = "<html>" +
                "<head><title>Not Found</title></head>" +
                "<body>Not Found</body></html>";
            }
            
            //send Header out
            os.writeBytes(statusLine);
            os.writeBytes(contentTypeLine);
            os.writeBytes(CRLF);

            // now we send the body 

            // send the entity body:
            if (fileExists)
            {
                sendBytes(fis, os);
                fis.close();
            }
            else
            {
                os.writeBytes(entityBody);
            }
            
            os.close();
            is.close();
            socket.close();
        }
        
        /*
    	 * Returns the Content type depending on the extension of the 
    	 * Requested file from the browser 
    	 */
        private static String contentType(String fileName)
		{
			if(fileName.endsWith(".htm") || fileName.endsWith(".html"))
			{
				return "text/html";
			}
			if(fileName.endsWith(".txt"))
			{
				return "text/plain";
			}
			if(fileName.endsWith(".css"))
			{
				return "text/css";
			}
			if(fileName.endsWith(".js"))
			{
				return "text/javascript";
			}
			if(fileName.endsWith(".png"))
			{
				return "image/png";
			}
			if(fileName.endsWith(".jpeg"))
			{
				return "image/jpeg";
			}
			if(fileName.endsWith(".wav"))
			{
				return "audio/wav";
			}
			if(fileName.endsWith(".mp3"))
			{
				return "audio/mpeg";
			}

			return "application/octet-stream";
		}

        /*
         * Reads from file and sends out the data
         */
        private static void sendBytes(FileInputStream fis, DataOutputStream os) throws Exception {
            
	        byte[] buffer = new byte[1024];
	        int bytes = 0;
        
            while((bytes = fis.read(buffer)) != -1 ){
                os.write(buffer,0,bytes);
            }
        }
}